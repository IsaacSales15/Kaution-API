generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  email              String            @unique
  name               String
  password           String
  isVerified         Boolean?          @default(false)
  verificationCode   String?
  verificationExpire DateTime
  inventories        Inventory[]       
  createdAt          DateTime?         @default(now())
  updateAt           DateTime?         @updatedAt
  authCodes          AuthCode[]
  InventoryAccess    InventoryAccess[]
}

model AuthCode {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  code      String
  expire    DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, expire])
}

model Inventory {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String            @db.ObjectId
  name            String
  updateAt        DateTime          @updatedAt
  createdAt       DateTime          @default(now())
  categories      Category[]        
  InventoryAccess InventoryAccess[]
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  inventoryId String    @db.ObjectId
  products    Product[] 
  created     DateTime  @default(now())
  updateAt    DateTime  @updatedAt
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  quantity    Int
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String   @db.ObjectId
  created     DateTime @default(now())
  updateAt    DateTime @updatedAt
}

model InventoryAccess {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @db.ObjectId
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  inventoryId String    @db.ObjectId
  role        Role      @default(USER)
  createdAt   DateTime  @default(now())

  @@index([userId, inventoryId], name: "user_inventory_unique")
}

enum Role {
  ADM
  USER
  VISITOR
}